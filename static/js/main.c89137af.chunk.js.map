{"version":3,"sources":["Header.js","TinderCards.js","SwipeButtons.js","Chat.js","Chats.js","ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Header","backButton","history","useHistory","className","IconButton","onClick","replace","fontSize","to","src","alt","TinderCards","useState","name","url","people","map","person","key","preventSwipe","style","backgroundImage","SwipeButtons","Chat","message","proPic","timeStamp","List","ListItem","button","component","Link","Avatar","Chats","ChatScreen","input","setInput","msg","img","setMessage","m","value","onChange","e","target","type","placeholder","preventDefault","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c89137af.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css'\r\nimport PersonIcon from '@material-ui/icons/Person'\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\nfunction Header({backButton}) {\r\n    const history =useHistory();\r\n    return (\r\n\r\n        <div className=\"header\">\r\n            {backButton?(\r\n                \r\n               <IconButton onClick={()=>history.replace(backButton)}>\r\n                   <ArrowBackIosIcon className=\"header__icon\" fontSize=\"large\"></ArrowBackIosIcon>\r\n               </IconButton>\r\n              \r\n            )\r\n            :(\r\n                <IconButton>\r\n            <PersonIcon className=\"header__icon\" fontSize=\"large\"/>\r\n            </IconButton>\r\n            )\r\n            }\r\n            \r\n           <Link to=\"/\">\r\n           <img className=\"header__logo\" src=\"https://1000logos.net/wp-content/uploads/2018/07/tinder-logo.png\" alt=\"tinder-logo\"/></Link> \r\n           \r\n           <Link to=\"/chats\">\r\n           <IconButton>\r\n            <ForumIcon className=\"header__icon\" fontSize=\"large\"/>\r\n            </IconButton>\r\n           </Link>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState } from 'react'\r\nimport TinderCard from 'react-tinder-card'\r\nimport './TinderCards.css'\r\nfunction TinderCards() {\r\n    const [people, setPeople] = useState([\r\n        {\r\n            name: 'Kamlesh Kumar',\r\n            url: 'https://scontent.fbho4-2.fna.fbcdn.net/v/t31.0-8/10387066_681248955328544_5182486362524355724_o.jpg?_nc_cat=109&_nc_sid=174925&_nc_ohc=nuHrK5gPZPoAX85QFvX&_nc_ht=scontent.fbho4-2.fna&oh=e9e8dbed77671507bc41dc843774aedd&oe=5F704A2F'\r\n        },\r\n        {\r\n            name: 'Mahesh Kumar',\r\n            url: 'https://scontent.fbho4-2.fna.fbcdn.net/v/t1.0-9/95896393_2964691493650934_2544153315491446784_o.jpg?_nc_cat=111&_nc_sid=174925&_nc_ohc=jXcr6VrSePsAX-zSRbP&_nc_ht=scontent.fbho4-2.fna&oh=1254633f97166e68aed608c49e2434b1&oe=5F6DE549'\r\n        }\r\n    ]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            \r\n\r\n            <div className=\"tindercards__cardcontainer\">\r\n            {people.map((person) => (\r\n\r\n                <TinderCard className=\"swipe\" key={person.name} preventSwipe={['up', 'down']}>\r\n                    <div style={{ backgroundImage: `url(${person.url})` }} className=\"card\">\r\n                        <h3>{person.name}</h3>\r\n                    </div>\r\n\r\n\r\n                </TinderCard>\r\n            ))}\r\n            </div>  \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default TinderCards\r\n","import React from 'react'\r\nimport ReplayIcon from '@material-ui/icons/Replay'\r\nimport StarRateIcon from '@material-ui/icons/StarRate'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite'\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport  './SwipeButtons.css'\r\nimport IconButton from '@material-ui/core/IconButton'\r\n\r\n\r\nfunction SwipeButtons() {\r\n    return (\r\n        <div className=\"swipebuttons\">\r\n            <IconButton className=\"swipebuttons__repeat\" > <ReplayIcon  fontSize=\"large\"/></IconButton>\r\n            <IconButton className=\"swipebuttons__left\"> <CloseIcon fontSize=\"large\"/></IconButton>\r\n            <IconButton className=\"swipebuttons__star\"><StarRateIcon fontSize=\"large\" /></IconButton> \r\n            <IconButton className=\"swipebuttons__right\"><FavoriteIcon fontSize=\"large\"/></IconButton> \r\n            <IconButton className=\"swipebuttons__flash\"> <FlashOnIcon fontSize=\"large\"/></IconButton>\r\n           \r\n           \r\n           \r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SwipeButtons\r\n","import React from 'react'\r\nimport './Chat.css'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport { ListItem,List } from '@material-ui/core';\r\nimport {Link} from 'react-router-dom'\r\nfunction Chat({ name, message, proPic,timeStamp }) {\r\n    return (\r\n       \r\n        <List className=\"sample\">\r\n        <ListItem  className=\"sample\" button component={Link} to={\"/chat/neha\"}>\r\n        <div className=\"chat\">\r\n            <Avatar className=\"chat__img\" src={proPic} />\r\n            <div className=\"chat__details\">\r\n                <h2>{name}</h2>\r\n                <p>{message}</p>\r\n            </div>\r\n            <p className=\"chat__timeStamp\">{timeStamp}</p>\r\n            </div>\r\n        </ListItem>\r\n        </List>\r\n       \r\n        \r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react'\r\nimport './Chats.css'\r\nimport Chat from \"./Chat\";\r\n\r\n\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport './Chats.css'\r\nfunction Chats() {\r\n    // const history=useHistory();\r\n    return (\r\n        <div className=\"chats\">\r\n          \r\n         \r\n            <Chat \r\n                name=\"Neha\"\r\n\r\n                message=\"hello r  r u?\"\r\n\r\n                proPic=\"https://scontent.fbho4-2.fna.fbcdn.net/v/t31.0-8/10387066_681248955328544_5182486362524355724_o.jpg?_nc_cat=109&_nc_sid=174925&_nc_ohc=nuHrK5gPZPoAX85QFvX&_nc_ht=scontent.fbho4-2.fna&oh=e9e8dbed77671507bc41dc843774aedd&oe=5F704A2F\"\r\n                timeStamp=\"35 minutes ago\"\r\n            />\r\n          \r\n          \r\n            \r\n      \r\n        \r\n\r\n            <Chat  name=\"Priya\"\r\n\r\n                message=\"whtsapp?\"\r\n\r\n                proPic=\"https://scontent.fbho4-2.fna.fbcdn.net/v/t1.0-9/95896393_2964691493650934_2544153315491446784_o.jpg?_nc_cat=111&_nc_sid=174925&_nc_ohc=jXcr6VrSePsAX-zSRbP&_nc_ht=scontent.fbho4-2.fna&oh=1254633f97166e68aed608c49e2434b1&oe=5F6DE549\"\r\n                timeStamp=\"1 hour ago\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chats\r\n","import React ,{useState}from 'react';\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport './ChatScreen.css'\r\nfunction ChatScreen() {\r\n    const [input,setInput]=useState();\r\n    const [message,setMessage]=useState([\r\n\r\n        {\r\n            name:'Neha',\r\n            msg:'hello How r  u?',\r\n            img:'https://upload.wikimedia.org/wikipedia/commons/7/7b/Shraddha_Kapoor_promoting_Street_Dancer_3D.jpg'\r\n        },\r\n        {\r\n            name:'Neha',\r\n            msg:'tell me and reply me?',\r\n            img:'https://upload.wikimedia.org/wikipedia/commons/7/7b/Shraddha_Kapoor_promoting_Street_Dancer_3D.jpg'\r\n            \r\n        },\r\n        {\r\n            msg:'I m gud '\r\n        }\r\n\r\n\r\n    ]);\r\n   const submitHandler=e=>{\r\n        e.preventDefault();\r\n        setMessage([...message,{msg:input}])\r\n        setInput(\"\");\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"chatscreen\">\r\n            <p className=\"chatscreen__timestamp\">You Matched With Neha on 20/08/2020</p>\r\n           {message.map((m)=>\r\n               m.name?\r\n               (<div className=\"chatscreen__message\">\r\n                   <Avatar src={m.img}/>\r\n                   <p className=\"chatscreen__messagetext\">\r\n                       {m.msg}\r\n                   </p>\r\n                   </div>\r\n           ):\r\n           (\r\n               <div className=\"chatscreen__message\">\r\n                   <p className=\"chatscreen__usermsg\">{m.msg}</p>\r\n                   </div>\r\n\r\n           )\r\n\r\n\r\n           )}\r\n            \r\n            <form className=\"chatscreen__form\">\r\n                <input value={input} onChange={e=>setInput(e.target.value)} type=\"text\" placeholder=\"Type a message... \" className=\"chatscreen__input\" />\r\n                <button type=\"submit\" onClick={submitHandler}>SEND</button>\r\n            </form>\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default ChatScreen\r\n","import React from 'react';\nimport Header from './Header';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport TinderCards from './TinderCards'\nimport SwipeButtons from './SwipeButtons'\nimport Chats from './Chats'\nimport ChatScreen from './ChatScreen'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        {/* Header */}\n        \n        <Switch>\n        <Route path=\"/chat/:person\">\n        <Header backButton=\"/chats\"/>\n            <ChatScreen/>\n\n          </Route>\n        <Route path=\"/chats\">\n        <Header backButton=\"/\"/>\n            <Chats/>\n          </Route>\n          <Route path=\"/\">\n            <Header/>\n            {/* card photo*/}\n            <TinderCards />\n            <SwipeButtons />\n            {/* footer button */}\n          </Route>\n         \n         \n        </Switch>\n\n\n\n        {/* char list screen */}\n        {/* individual chat screen */}\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}